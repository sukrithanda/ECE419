Only in reference/Mazewar/: .gitignore
Only in reference/Mazewar/: .idea
Only in reference/Mazewar/: ActionPacket.java
diff -bur git_workspace/ECE419/src/lab2/mazewar/Client.java reference/Mazewar/Client.java
--- git_workspace/ECE419/src/lab2/mazewar/Client.java	2015-02-05 23:49:16.212172900 -0500
+++ reference/Mazewar/Client.java	2014-04-10 15:07:37.000000000 -0400
@@ -112,7 +112,11 @@
         /**
          * Name of the client.
          */
-        private String name = null;
+        // TODO: these should really be private with getter/setter
+
+        public String name = null;
+
+        public int clientID = -1;
        
         /** 
          * Create a new client with the specified name.
@@ -222,6 +226,7 @@
          * @param ce Event to be sent.
          */
         private void notifyListeners(ClientEvent ce) {
+
                 assert(ce != null);
                 Iterator i = listenerSet.iterator();
                 while (i.hasNext()) {
Only in reference/Mazewar/: ClientEngineReceiver.java
Only in reference/Mazewar/: ClientEngineSender.java
Only in reference/Mazewar/: ClientEngineWorker.java
diff -bur git_workspace/ECE419/src/lab2/mazewar/DirectedPoint.java reference/Mazewar/DirectedPoint.java
--- git_workspace/ECE419/src/lab2/mazewar/DirectedPoint.java	2015-02-05 23:49:16.227797800 -0500
+++ reference/Mazewar/DirectedPoint.java	2014-04-10 15:07:37.000000000 -0400
@@ -74,4 +74,8 @@
         public Direction getDirection(){
                 return direction;
         }
+
+        public String toString() {
+                return  "(" + this.getX() + ", " + this.getY() + ") to " + direction.toString();
+        }
 }
diff -bur git_workspace/ECE419/src/lab2/mazewar/Direction.java reference/Mazewar/Direction.java
--- git_workspace/ECE419/src/lab2/mazewar/Direction.java	2015-02-05 23:49:16.227797800 -0500
+++ reference/Mazewar/Direction.java	2014-04-10 15:07:37.000000000 -0400
@@ -17,6 +17,7 @@
 USA.
 */
   
+import java.io.Serializable;
 import java.util.Random;
 
 /**
@@ -25,7 +26,7 @@
  * @version $Id: Direction.java 339 2004-01-23 20:06:22Z geoffw $
  */
 
-public class Direction {
+public class Direction implements Serializable {
         
         /* Internals ******************************************************/
         
diff -bur git_workspace/ECE419/src/lab2/mazewar/GUIClient.java reference/Mazewar/GUIClient.java
--- git_workspace/ECE419/src/lab2/mazewar/GUIClient.java	2015-02-05 23:49:16.227797800 -0500
+++ reference/Mazewar/GUIClient.java	2014-04-10 15:07:37.000000000 -0400
@@ -19,6 +19,11 @@
 
 import java.awt.event.KeyListener;
 import java.awt.event.KeyEvent;
+import java.util.HashMap;
+import java.util.Queue;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentLinkedQueue;
+import java.util.concurrent.atomic.AtomicBoolean;
 
 /**
  * An implementation of {@link LocalClient} that is controlled by the keyboard
@@ -36,30 +41,80 @@
                 super(name);
         }
         
+    // Packet generation methods
+    public boolean register() {
+        ActionPacket packetToServer = new ActionPacket();
+        packetToServer.packet_type = packetToServer.GET_UNIQUE_ID;
+        packetToServer.name = name;
+        this.outBuffer.offer(packetToServer);
+        return true;
+    }
+
+    public boolean signalReady() {
+        ActionPacket packetToServer = new ActionPacket();
+        packetToServer.packet_type = ActionPacket.SET_CLIENT_READY; // we are ready to go
+        packetToServer.name = this.name;
+        packetToServer.client_id = this.clientID;
+        this.outBuffer.offer(packetToServer);
+        return true;
+    }
+
+    public boolean addMeToMap() {
+        ActionPacket packetToServer = new ActionPacket();
+        packetToServer.packet_type = ActionPacket.MAZ_ADD_CLIENT;
+        packetToServer.client_id = this.clientID;
+        packetToServer.name = this.name;
+        this.outBuffer.offer(packetToServer);
+        return true;
+    }
+
+    public boolean holdFuneral(Point point, Direction direction) {
+        ActionPacket packetToServer = new ActionPacket();
+        packetToServer.packet_type = ActionPacket.MAZ_PLAYER_KILLED;
+        packetToServer.client_id = this.clientID;
+        packetToServer.name = this.name;
+        packetToServer.point = point;
+        packetToServer.direction = direction;
+        this.outBuffer.offer(packetToServer);
+        return true;
+    }
+
         /**
          * Handle a key press.
          * @param e The {@link KeyEvent} that occurred.
          */
         public void keyPressed(KeyEvent e) {
+        // We're going to notify the server
+        ActionPacket packetToServer = new ActionPacket();
+        packetToServer.client_id = this.clientID;
+        packetToServer.name = this.name;
+
                 // If the user pressed Q, invoke the cleanup code and quit. 
                 if((e.getKeyChar() == 'q') || (e.getKeyChar() == 'Q')) {
                         Mazewar.quit();
                 // Up-arrow moves forward.
                 } else if(e.getKeyCode() == KeyEvent.VK_UP) {
-                        forward();
+            packetToServer.packet_type = packetToServer.MAZ_MOV_FORWARDS;
+            //forward();
                 // Down-arrow moves backward.
                 } else if(e.getKeyCode() == KeyEvent.VK_DOWN) {
-                        backup();
+            packetToServer.packet_type = packetToServer.MAZ_MOV_BACKWARDS;
+            //backup();
                 // Left-arrow turns left.
                 } else if(e.getKeyCode() == KeyEvent.VK_LEFT) {
-                        turnLeft();
+            packetToServer.packet_type = packetToServer.MAZ_MOV_LEFT;
+            //turnLeft();
                 // Right-arrow turns right.
                 } else if(e.getKeyCode() == KeyEvent.VK_RIGHT) {
-                        turnRight();
+            packetToServer.packet_type = packetToServer.MAZ_MOV_RIGHT;
+            //turnRight();
                 // Spacebar fires.
                 } else if(e.getKeyCode() == KeyEvent.VK_SPACE) {
-                        fire();
+            packetToServer.packet_type = packetToServer.MAZ_SHOOT;
+            //fire();
                 }
+
+        this.outBuffer.offer(packetToServer);
         }
         
         /**
@@ -76,4 +131,9 @@
         public void keyTyped(KeyEvent e) {
         }
 
+    final public ConcurrentHashMap IDToClientMap = new ConcurrentHashMap();
+    final public Queue<ActionPacket> inBuffer = new ConcurrentLinkedQueue<ActionPacket>();
+    final public Queue<ActionPacket> outBuffer = new ConcurrentLinkedQueue<ActionPacket>();
+    public AtomicBoolean initialized = new AtomicBoolean(false);
+    public AtomicBoolean gameStarted = new AtomicBoolean(false);
 }
diff -bur git_workspace/ECE419/src/lab2/mazewar/Makefile reference/Mazewar/Makefile
--- git_workspace/ECE419/src/lab2/mazewar/Makefile	2015-02-05 23:49:16.243423200 -0500
+++ reference/Mazewar/Makefile	2014-04-10 15:07:37.000000000 -0400
@@ -5,16 +5,21 @@
 # The jikes is *way* faster if you have it.
 #JAVAC=${JIKES}
 # Otherwise use Sun's compiler.
-JAVA_HOME=/cad2/ece419s/java/jdk1.6.0/
-JAVAC=${JAVA_HOME}/bin/javac -source 1.4
+JAVA_HOME=/usr
+JAVAC=${JAVA_HOME}/bin/javac -source 1.6
 JAVADOC=${JAVA_HOME}/bin/javadoc -use -source 1.6 -author -version -link http://java.sun.com/j2se/1.6.0/docs/api/ 
+
+#JAVA_HOME=/usr
+#JAVAC=${JAVA_HOME}/bin/javac -source 1.6
+#JAVADOC=${JAVA_HOME}/bin/javadoc -use -source 1.6 -author -version -link http://java.sun.com/j2se/1.6.0/docs/api/
+
 MKDIR=mkdir
 RM=rm -rf
 CAT=cat
 
 # The only file we are interested in is Mazewar.class,
 # the rest are handled by the dependencies.
-FILES=Mazewar.class
+FILES=Mazewar.class MazewarServer.class
 
 all: ${FILES}
 
diff -bur git_workspace/ECE419/src/lab2/mazewar/Makefile.dep reference/Mazewar/Makefile.dep
--- git_workspace/ECE419/src/lab2/mazewar/Makefile.dep	2015-02-05 23:49:16.243423200 -0500
+++ reference/Mazewar/Makefile.dep	2014-04-10 15:07:37.000000000 -0400
@@ -345,3 +345,27 @@
 ScoreTableModel.class : ClientEvent.java
 ScoreTableModel.class : ClientEvent.class
 SortedMultiSet.class : SortedMultiSet.java
+MazewarServer.class : MazewarServer.class
+MazewarServer.class : MazewarServerClient.java
+MazewarServer.class : MazewarServerClient.class
+MazewarServer.class : MazewarServerThread.class
+MazewarServer.class : MazewarServerTickThread.java
+MazewarServer.class : MazewarServerTickThread.class
+MazewarServer.class : MazewarServerProcessThread.java
+MazewarServer.class : MazewarServerProcessThread.class
+MazewarServer.class : ActionPacket.java
+MazewarServer.class : ActionPacket.class
+ActionPacket.class : ActionPacket.java
+MazewarServerClient.class : MazewarServerClient.java
+MazewarServerThread.class : MazewarServer.java
+MazewarServerProcessThread.class : MazewarServerProcessThread.java
+MazewarServerTickThread.class : MazewarServerTickThread.java
+Mazewar.class : ClientEngineWorker.class
+Mazewar.class : ClientEngineSender.class
+Mazewar.class : ClientEngineReceiver.class
+ClientEngineWorker.class : ActionPacket.class
+ClientEngineSender.class : ActionPacket.class
+ClientEngineReceiver.class : ActionPacket.class
+ClientEngineWorker.class : ClientEngineWorker.java
+ClientEngineSender.class : ClientEngineSender.java
+ClientEngineReceiver.class : ClientEngineReceiver.java
diff -bur git_workspace/ECE419/src/lab2/mazewar/Maze.java reference/Mazewar/Maze.java
--- git_workspace/ECE419/src/lab2/mazewar/Maze.java	2015-02-05 23:49:16.243423200 -0500
+++ reference/Mazewar/Maze.java	2014-04-10 15:07:37.000000000 -0400
@@ -56,7 +56,7 @@
      * Add a {@link Client} at random location in the {@link Maze}. 
      * @param client {@link Client} to be added to the {@link Maze}.
      */
-    public abstract void addClient(Client client);
+    public abstract void addClient(Client client, DirectedPoint point);
 
     /** 
      * Create a new {@link Projectile} from the specified {@link Client}
@@ -70,6 +70,8 @@
      */
     public abstract void removeClient(Client client);
 
+    public abstract void respawnClient(Client client, Point point, Direction direction);
+
     /** 
      * Find out where a specified {@link Client} is located 
      * in the {@link Maze}.
Only in reference/Mazewar/: MazeAssignment.iml
diff -bur git_workspace/ECE419/src/lab2/mazewar/MazeImpl.java reference/Mazewar/MazeImpl.java
--- git_workspace/ECE419/src/lab2/mazewar/MazeImpl.java	2015-02-05 23:49:16.259048100 -0500
+++ reference/Mazewar/MazeImpl.java	2014-04-10 15:07:37.000000000 -0400
@@ -193,17 +193,40 @@
                 return getCellImpl(point);
         }
         
-        public synchronized void addClient(Client client) {
+        // public synchronized void addClient(Client client, Point point) {
+        //         assert(client != null);
+        //         // // Pick a random starting point, and check to see if it is already occupied
+        //         // Point point = new Point(randomGen.nextInt(maxX),randomGen.nextInt(maxY));
+        //         // CellImpl cell = getCellImpl(point);
+        //         // // Repeat until we find an empty cell
+        //         // while(cell.getContents() != null) {
+        //         //         point = new Point(randomGen.nextInt(maxX),randomGen.nextInt(maxY));
+        //         //         cell = getCellImpl(point);
+        //         // } 
+        //         addClient(client, point);
+        // }
+        
+        /**
+         * Internal helper for adding a {@link Client} to the {@link Maze}.
+         * @param client The {@link Client} to be added.
+         * @param point The location the {@link Client} should be added.
+         */
+        public synchronized void addClient(Client client, DirectedPoint point) {
                 assert(client != null);
-                // Pick a random starting point, and check to see if it is already occupied
-                Point point = new Point(randomGen.nextInt(maxX),randomGen.nextInt(maxY));
+                assert(checkBounds(point));
                 CellImpl cell = getCellImpl(point);
-                // Repeat until we find an empty cell
-                while(cell.getContents() != null) {
-                        point = new Point(randomGen.nextInt(maxX),randomGen.nextInt(maxY));
-                        cell = getCellImpl(point);
+
+                cell.setContents(client);
+                clientMap.put(client, point);
+                client.registerMaze(this);
+                client.addClientListener(this);
+
+                while (cell.isWall(client.getOrientation())) {
+                    client.turnRight();
                 } 
-                addClient(client, point);
+
+                update();
+                notifyClientAdd(client);
         }
         
         public synchronized Point getClientPoint(Client client) {
@@ -415,26 +438,7 @@
                 update();
                 return deadPrj;
         }
-        /**
-         * Internal helper for adding a {@link Client} to the {@link Maze}.
-         * @param client The {@link Client} to be added.
-         * @param point The location the {@link Client} should be added.
-         */
-        private synchronized void addClient(Client client, Point point) {
-                assert(client != null);
-                assert(checkBounds(point));
-                CellImpl cell = getCellImpl(point);
-                Direction d = Direction.random();
-                while(cell.isWall(d)) {
-                  d = Direction.random();
-                }
-                cell.setContents(client);
-                clientMap.put(client, new DirectedPoint(point, d));
-                client.registerMaze(this);
-                client.addClientListener(this);
-                update();
-                notifyClientAdd(client);
-        }
+
         
         /**
          * Internal helper for handling the death of a {@link Client}.
@@ -446,11 +450,17 @@
                 assert(target != null);
                 Mazewar.consolePrintLn(source.getName() + " just vaporized " + 
                                 target.getName());
+
                 Object o = clientMap.remove(target);
                 assert(o instanceof Point);
                 Point point = (Point)o;
                 CellImpl cell = getCellImpl(point);
                 cell.setContents(null);
+
+                if (target instanceof GUIClient) {
+
+                    System.out.println("I just got PWNED!!!");
+
                 // Pick a random starting point, and check to see if it is already occupied
                 point = new Point(randomGen.nextInt(maxX),randomGen.nextInt(maxY));
                 cell = getCellImpl(point);
@@ -463,12 +473,18 @@
                 while(cell.isWall(d)) {
                         d = Direction.random();
                 }
-                cell.setContents(target);
-                clientMap.put(target, new DirectedPoint(point, d));
-                update();
+                    ((GUIClient) target).holdFuneral(point, d);
+                }
                 notifyClientKilled(source, target);
         }
         
+        public synchronized void respawnClient(Client client, Point point, Direction direction) {
+            CellImpl cell = getCellImpl(point);
+            cell.setContents(client);
+            clientMap.put(client, new DirectedPoint(point, direction));
+            update();
+        }
+        
         /**
          * Internal helper called when a {@link Client} emits a turnLeft action.
          * @param client The {@link Client} to rotate.
diff -bur git_workspace/ECE419/src/lab2/mazewar/Mazewar.java reference/Mazewar/Mazewar.java
--- git_workspace/ECE419/src/lab2/mazewar/Mazewar.java	2015-02-05 23:49:16.274674200 -0500
+++ reference/Mazewar/Mazewar.java	2014-04-10 15:07:37.000000000 -0400
@@ -27,13 +27,18 @@
 import java.awt.GridBagConstraints;
 import javax.swing.BorderFactory;
 import java.io.Serializable;
+import java.util.HashMap;
+import java.util.Queue;
+import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.concurrent.ConcurrentLinkedQueue;
+import java.util.concurrent.ConcurrentHashMap;
 
 /**
- * The entry point and glue code for the game.  It also contains some helpful
- * global utility methods.
- * @author Geoffrey Washburn &lt;<a href="mailto:geoffw@cis.upenn.edu">geoffw@cis.upenn.edu</a>&gt;
- * @version $Id: Mazewar.java 371 2004-02-10 21:55:32Z geoffw $
- */
+* The entry point and glue code for the game.  It also contains some helpful
+* global utility methods.
+* @author Geoffrey Washburn &lt;<a href="mailto:geoffw@cis.upenn.edu">geoffw@cis.upenn.edu</a>&gt;
+* @version $Id: Mazewar.java 371 2004-02-10 21:55:32Z geoffw $
+*/
 
 public class Mazewar extends JFrame {
 
@@ -52,7 +57,7 @@
          * All implementations of the same protocol must use 
          * the same seed value, or your mazes will be different.
          */
-        private final int mazeSeed = 42;
+    private final int mazeSeed = 41;
 
         /**
          * The {@link Maze} that the game uses.
@@ -67,7 +72,7 @@
         /**
          * The panel that displays the {@link Maze}.
          */
-        private OverheadMazePanel overheadPanel = null;
+    public OverheadMazePanel overheadPanel = null;
 
         /**
          * The table the displays the scores.
@@ -75,6 +80,11 @@
         private JTable scoreTable = null;
         
         /** 
+    * A map of all the players from name to client object
+    */
+
+
+    /**
          * Create the textpane statically so that we can 
          * write to it globally using
          * the static consolePrint methods  
@@ -133,28 +143,74 @@
                 assert(scoreModel != null);
                 maze.addMazeListener(scoreModel);
                 
-                // Throw up a dialog to get the GUIClient name.
+        // Ask for where the server is.
+        String server_hostname = JOptionPane.showInputDialog("Enter the hostname of the server");
+        if((server_hostname == null) || (server_hostname.length() == 0)) {
+            Mazewar.quit();
+        }
+        String server_port_str = JOptionPane.showInputDialog("Enter the port of the server");
+        int server_port = -1;
+        if((server_port_str == null) || (server_port_str.length() == 0)) {
+            Mazewar.quit();
+        }
+        try {
+            server_port = Integer.parseInt(server_port_str);
+        } catch (NumberFormatException e) {
+            Mazewar.quit(); // user didn't enter a number
+        }
+
+        final ServerConnection servConn = new ServerConnection(server_hostname, server_port);
+        System.out.println("Established connection with server!");
+
+        // Ask for client information
                 String name = JOptionPane.showInputDialog("Enter your name");
                 if((name == null) || (name.length() == 0)) {
                   Mazewar.quit();
                 }
                 
-                // You may want to put your network initialization code somewhere in
-                // here.
-                
-                // Create the GUIClient and connect it to the KeyListener queue
+        // We now have enough information to begin exchanging messages with server
                 guiClient = new GUIClient(name);
-                maze.addClient(guiClient);
-                this.addKeyListener(guiClient);
+
+        ClientEngineSender sender = new ClientEngineSender(guiClient, servConn);
+        ClientEngineReceiver receiver = new ClientEngineReceiver(guiClient, servConn);
+        ClientEngineWorker worker = new ClientEngineWorker(guiClient, maze, this);
+
+        new Thread(sender).start();
+        new Thread(receiver).start();
+        new Thread(worker).start();
+
+        // Register myself on the server
+        guiClient.register();
+
+        // We can set up a prompt in another thread for the user to say he's ready
+        class ReadyPrompt implements Runnable{
+            @Override
+            public void run() {
+                String ready = "";
+                while (!ready.equals("ready") && !guiClient.initialized.get()) {
+                    ready = JOptionPane.showInputDialog("Type ready to start game!");
+                }
+
+                System.out.println("User signaled ready. Waiting for initialization");
+                guiClient.signalReady();
+            }
+        }
+        new Thread(new ReadyPrompt()).start();
+
+        // Now we'll wait here until the game starts
+        System.out.println("Waiting for start of game");
+        while (!guiClient.gameStarted.get()) {
+            //spin
+        }
                 
                 // Use braces to force constructors not to be called at the beginning of the
                 // constructor.
-                {
-                        maze.addClient(new RobotClient("Norby"));
-                        maze.addClient(new RobotClient("Robbie"));
-                        maze.addClient(new RobotClient("Clango"));
-                        maze.addClient(new RobotClient("Marvin"));
-                }
+        // {
+        //         maze.addClient(new RobotClient("Norby"));
+        //         maze.addClient(new RobotClient("Robbie"));
+        //         maze.addClient(new RobotClient("Clango"));
+        //         maze.addClient(new RobotClient("Marvin"));
+        // }
 
                 
                 // Create the panel that will display the maze.
Only in reference/Mazewar/: MazewarServer.java
Only in reference/Mazewar/: MazewarServerClient.java
Only in reference/Mazewar/: MazewarServerProcessThread.java
Only in reference/Mazewar/: MazewarServerTickThread.java
Only in reference/Mazewar/: out
diff -bur git_workspace/ECE419/src/lab2/mazewar/OverheadMazePanel.java reference/Mazewar/OverheadMazePanel.java
--- git_workspace/ECE419/src/lab2/mazewar/OverheadMazePanel.java	2015-02-05 23:49:16.274674200 -0500
+++ reference/Mazewar/OverheadMazePanel.java	2014-04-10 15:07:37.000000000 -0400
@@ -157,10 +157,12 @@
                 for(int i = 0; i < p.getY(); i++) {
                         for(int j = 0; j < p.getX(); j++) {
                                 boolean cellVisible = true;
+                                if(cp != null){
                                 Line2D visLine = new Line2D.Double(llx + (cp.getX() + 0.5)*cellwidth,
                                                                   lly + (cp.getY() + 0.5)*cellheight,
                                                                   llx + (j + 0.5)*cellwidth,
                                                                   lly + (i + 0.5)*cellheight);
+                                }
 
                                 /* Visibility testing */
                                 /* Iterator visIt = wallList.iterator();
@@ -194,15 +196,17 @@
                                                         double xoffset = llx + j*cellwidth + (cellwidth/2.0);
                                                         double yoffset = lly + i*cellheight + (cellheight/2.0);
                                                         Direction orient = c.getOrientation();
+                                                        System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"+c.clientID+": "+orient);
                                                         g2.translate(xoffset, yoffset);
                                                         double rotation = 0.0; 
-                                                        if(orient == Direction.South) {
+                                                        if(orient.equals(Direction.South)) {
                                                                 rotation=-java.lang.Math.PI/2.0;
-                                                        } else if (orient == Direction.North) {
+                                                        } else if (orient.equals(Direction.North)) {
                                                                 rotation=java.lang.Math.PI/2.0;
-                                                        } else if (orient == Direction.West) {
+                                                        } else if (orient.equals(Direction.West)) {
                                                                 rotation=java.lang.Math.PI;
                                                         }
+                                                        System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"+c.clientID+": "+rotation);
                                                         g2.rotate(rotation);
                                                         g2.fill(player);
                                                         g2.rotate(-rotation);
diff -bur git_workspace/ECE419/src/lab2/mazewar/Point.java reference/Mazewar/Point.java
--- git_workspace/ECE419/src/lab2/mazewar/Point.java	2015-02-05 23:49:16.274674200 -0500
+++ reference/Mazewar/Point.java	2014-04-10 15:07:37.000000000 -0400
@@ -65,6 +65,8 @@
                 return y;
         }
         
+        
+        
         /**
          * Create a new {@link Point} by moving from this
          * one by a single unit in a given {@Direction}. 
@@ -88,4 +90,6 @@
                 /* Impossible */
                 return null;
         }
+
+
 }
Only in reference/Mazewar/: README.md
diff -bur git_workspace/ECE419/src/lab2/mazewar/run.sh reference/Mazewar/run.sh
--- git_workspace/ECE419/src/lab2/mazewar/run.sh	2015-02-05 23:49:16.321549400 -0500
+++ reference/Mazewar/run.sh	2014-04-10 15:07:37.000000000 -0400
@@ -1,4 +1,4 @@
 #!/bin/bash
-JAVA_HOME=/cad2/ece419s/java/jdk1.6.0/
+JAVA_HOME=/usr
 
 ${JAVA_HOME}/bin/java Mazewar 
Only in reference/Mazewar/: ServerConnection.java
